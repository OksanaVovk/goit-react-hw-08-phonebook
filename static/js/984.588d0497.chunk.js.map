{"version":3,"file":"static/js/984.588d0497.chunk.js","mappings":"6MAqFA,UAhFqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACbC,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAASF,EAAAA,EAAAA,MACb,GAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,cAAtBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OADAC,QAAQC,IAAIJ,EAAMC,cAAcR,MACxBA,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,QACHN,EAASM,GACT,MACF,IAAK,WACHJ,EAAYI,GACZ,MACF,QACE,OAEL,EAcD,OACE,kBAAMG,SAPa,SAAAL,GACnBA,EAAMM,iBACNpB,EAASqB,EAAAA,EAAAA,SAAwB,CAAEd,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAPhDH,EAAQ,IACRE,EAAS,IACTE,EAAY,GAOb,EAGC,WACE,mBAAOU,QAASpB,EAAhB,kBAEE,kBACEqB,SAAUV,EACVW,KAAK,OACLjB,KAAK,OACLS,MAAOT,EACPkB,UAAQ,QAGZ,mBAAOH,QAASlB,EAAhB,mBAEE,kBACEmB,SAAUV,EACVW,KAAK,QACLjB,KAAK,QACLS,MAAOP,EACPgB,UAAQ,QAGZ,mBAAOH,QAASjB,EAAhB,sBAEE,kBACEkB,SAAUV,EACVW,KAAK,WACLjB,KAAK,WACLS,MAAOL,EACPe,aAAa,mBACbC,GAAC,EACDC,UAAU,IACVH,UAAQ,QAGZ,mBAAQI,UAAU,cAAcL,KAAK,SAArC,4BAKL,C,wDCnFM,IAkBIrB,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Pages/RegisterForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import authOperations from 'redux/auth/auth-operations';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  let nameId = nanoid();\n  let emailId = nanoid();\n  let passId = nanoid();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    console.log(event.currentTarget.name);\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>\n        Name\n        <input\n          onChange={handleInputChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          required\n        />\n      </label>\n      <label htmlFor={emailId}>\n        Email\n        <input\n          onChange={handleInputChange}\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          required\n        />\n      </label>\n      <label htmlFor={passId}>\n        Password\n        <input\n          onChange={handleInputChange}\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          autoComplete=\"current-password\"\n          n\n          minLength=\"7\"\n          required\n        />\n      </label>\n      <button className=\"main_button\" type=\"submit\">\n        Registration\n      </button>\n    </form>\n  );\n};\nexport default RegisterForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["dispatch","useDispatch","nameId","nanoid","emailId","passId","useState","name","setName","email","setEmail","password","setPassword","handleInputChange","event","currentTarget","value","console","log","onSubmit","preventDefault","authOperations","htmlFor","onChange","type","required","autoComplete","n","minLength","className","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}