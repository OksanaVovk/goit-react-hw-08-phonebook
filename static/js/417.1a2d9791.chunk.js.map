{"version":3,"file":"static/js/417.1a2d9791.chunk.js","mappings":"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","sources":["components/ContactForm.js","components/Filter.js","components/ContactItem.js","components/ContactList.js","Pages/Contacts.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import 'react-native-get-random-values';\nimport { useFetchContactsQuery } from 'redux/reducer';\nimport { useState } from 'react';\nimport { useAddContactMutation } from 'redux/reducer';\nimport Spinner from './Spinner';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport * as React from 'react';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst themes = createTheme();\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { data } = useFetchContactsQuery();\n\n  const [createContact, { isLoading }] = useAddContactMutation();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (data) {\n      const isRepead = data.some(contact =>\n        contact.name.toLowerCase().includes(name.toLowerCase())\n      );\n      if (isRepead) {\n        Notify.failure(`${name} is already in contacts`);\n      } else {\n        try {\n          await createContact({ name: name, number: number });\n          Notify.success('A new contact has been successfully created');\n        } catch {\n          console.log(Error);\n          Notify.warning('Contact could not be saved');\n        }\n      }\n      reset();\n    } else {\n      try {\n        await createContact({ name: name, number: number });\n        Notify.success('A new contact has been created');\n      } catch {\n        console.log(Error);\n        Notify.warning('Contact could not be saved');\n      }\n      reset();\n    }\n  };\n\n  return (\n    <ThemeProvider theme={themes}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'start',\n          }}\n        >\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <label>\n              Name\n              <TextField\n                margin=\"normal\"\n                fullWidth\n                id=\"name\"\n                autoFocus\n                type=\"text\"\n                value={name}\n                name=\"name\"\n                onChange={handleInputChange}\n                required\n              />\n            </label>\n            <label>\n              Number\n              <TextField\n                margin=\"normal\"\n                fullWidth\n                id=\"phone\"\n                autoComplete=\"phone\"\n                autoFocus\n                type=\"tel\"\n                value={number}\n                name=\"phone\"\n                onChange={handleInputChange}\n                required\n              />\n            </label>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n              className=\"main_button\"\n              type=\"submit\"\n              disabled={isLoading}\n            >\n              {isLoading && <Spinner />}\n              Add contact\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n","import React from 'react';\n\nconst Filter = ({ id, value, onChange }) => (\n  <label htmlFor={id}>\n    Find contacts by name\n    <input\n      id={id}\n      type=\"text\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    />\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\nimport { useDeleteContactMutation } from 'redux/reducer';\nimport Spinner from './Spinner';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst ContactItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const onBtnClick = async id => {\n    try {\n      await deleteContact(id);\n      Notify.success('The contact has been deleted');\n    } catch {\n      console.log(Error);\n      Notify.warning('Deletion error');\n    }\n  };\n  return (\n    <li key={id}>\n      <div className=\"item_cont\">\n        {name}:<span>{number}</span>\n        <button onClick={() => onBtnClick(id)} disabled={isDeleting}>\n          {isDeleting && <Spinner />}\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport React from 'react';\n\nconst ContactList = ({ contactArray }) => (\n  <ul>\n    {contactArray.map(contact => (\n      <ContactItem\n        id={contact.id}\n        name={contact.name}\n        number={contact.number}\n      />\n    ))}\n  </ul>\n);\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../redux/actions';\nimport { useFetchContactsQuery } from 'redux/reducer';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport 'react-native-get-random-values';\nimport { nanoid } from 'nanoid';\n\nexport const Contacts = () => {\n  const { data } = useFetchContactsQuery();\n  const valueFilter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  let filtId = nanoid();\n\n  const handleFilterChange = event => {\n    dispatch(changeFilter(event.currentTarget.value));\n  };\n\n  const getVisiableContacts = () => {\n    if (data) {\n      const normalizedFilter = valueFilter.toLowerCase();\n      return data.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n  };\n\n  const visiableContacts = getVisiableContacts();\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter id={filtId} value={valueFilter} onChange={handleFilterChange} />\n      {data && (\n        <ContactList contactArray={valueFilter ? visiableContacts : data} />\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["themes","createTheme","ContactForm","useState","name","setName","number","setNumber","data","useFetchContactsQuery","useAddContactMutation","createContact","isLoading","handleInputChange","event","currentTarget","value","reset","handleSubmit","preventDefault","some","contact","toLowerCase","includes","Notify","console","log","Error","ThemeProvider","theme","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","onSubmit","noValidate","mt","TextField","margin","fullWidth","id","autoFocus","type","onChange","required","autoComplete","Button","variant","mb","className","disabled","Spinner","htmlFor","useDeleteContactMutation","deleteContact","isDeleting","onBtnClick","onClick","contactArray","map","Contacts","valueFilter","useSelector","state","filter","dispatch","useDispatch","filtId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","visiableContacts","normalizedFilter","getVisiableContacts","changeFilter"],"sourceRoot":""}