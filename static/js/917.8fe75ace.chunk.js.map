{"version":3,"file":"static/js/917.8fe75ace.chunk.js","mappings":"6MAkEA,UA7DkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACbC,GAAUC,EAAAA,EAAAA,MACVC,GAASD,EAAAA,EAAAA,MAEPE,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,cAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OADAC,QAAQC,IAAIL,EAAMC,cAAcC,MACxBA,GACN,IAAK,QACHX,EAASY,GACT,MACF,IAAK,WACHV,EAAYU,GACZ,MACF,QACE,OAEL,EAaD,OACE,kBAAMG,SAPa,SAAAN,GACnBA,EAAMO,iBACNb,EAASc,EAAAA,EAAAA,MAAqB,CAAElB,MAAAA,EAAOE,SAAAA,KANvCD,EAAS,IACTE,EAAY,GAOb,EAGC,WACE,mBAAOgB,QAASb,EAAhB,mBAEE,kBACEc,SAAUX,EACVY,KAAK,QACLT,KAAK,QACLU,UAAQ,QAGZ,mBAAOH,QAASX,EAAhB,sBAEE,kBACEY,SAAUX,EACVY,KAAK,WACLT,KAAK,WACLW,UAAW,EACXC,aAAa,mBACbF,UAAQ,QAGZ,mBAAQG,UAAU,cAAcJ,KAAK,SAArC,sBAKL,C,wDChEM,IAkBId,EAAS,eAACmB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Pages/LoginForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport authOperations from 'redux/auth/auth-operations';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  let emailId = nanoid();\n  let passId = nanoid();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    console.log(event.currentTarget.name);\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(authOperations.logIn({ email, password }));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={emailId}>\n        Email\n        <input\n          onChange={handleInputChange}\n          type=\"email\"\n          name=\"email\"\n          required\n        />\n      </label>\n      <label htmlFor={passId}>\n        Password\n        <input\n          onChange={handleInputChange}\n          type=\"password\"\n          name=\"password\"\n          minLength={7}\n          autoComplete=\"current-password\"\n          required\n        />\n      </label>\n      <button className=\"main_button\" type=\"submit\">\n        Log In\n      </button>\n    </form>\n  );\n};\nexport default LoginForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","email","setEmail","password","setPassword","dispatch","useDispatch","emailId","nanoid","passId","handleInputChange","event","currentTarget","name","value","console","log","onSubmit","preventDefault","authOperations","htmlFor","onChange","type","required","minLength","autoComplete","className","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}