{"version":3,"file":"static/js/374.87142ff3.chunk.js","mappings":"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","sources":["components/ContactForm.js","components/Filter.js","components/ContactItem.js","components/ContactList.js","Pages/Contacts.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import 'react-native-get-random-values';\nimport { nanoid } from 'nanoid';\nimport { useFetchContactsQuery } from 'redux/reducer';\nimport { useState } from 'react';\nimport { useAddContactMutation } from 'redux/reducer';\nimport Spinner from './Spinner';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { data } = useFetchContactsQuery();\n\n  let nameId = nanoid();\n  let numbId = nanoid();\n  const [createContact, { isLoading }] = useAddContactMutation();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (data) {\n      const isRepead = data.some(contact =>\n        contact.name.toLowerCase().includes(name.toLowerCase())\n      );\n      if (isRepead) {\n        Notify.failure(`${name} is already in contacts`);\n      } else {\n        try {\n          await createContact({ name: name, number: number });\n          Notify.success('A new contact has been created');\n        } catch {\n          console.log(Error);\n          Notify.warning('Contact could not be saved');\n        }\n      }\n      reset();\n    } else {\n      try {\n        await createContact({ name: name, number: number });\n        Notify.success('A new contact has been created');\n      } catch {\n        console.log(Error);\n        Notify.warning('Contact could not be saved');\n      }\n      reset();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>\n        Name\n        <input\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor={numbId}>\n        Number\n        <input\n          type=\"tel\"\n          value={number}\n          name=\"phone\"\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className=\"main_button\" type=\"submit\" disabled={isLoading}>\n        {isLoading && <Spinner />}\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\n\nconst Filter = ({ id, value, onChange }) => (\n  <label htmlFor={id}>\n    Find contacts by name\n    <input\n      id={id}\n      type=\"text\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    />\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\nimport { useDeleteContactMutation } from 'redux/reducer';\nimport Spinner from './Spinner';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst ContactItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const onBtnClick = async id => {\n    try {\n      await deleteContact(id);\n      Notify.success('The contact has been deleted');\n    } catch {\n      console.log(Error);\n      Notify.warning('Deletion error');\n    }\n  };\n  return (\n    <li key={id}>\n      <div className=\"item_cont\">\n        {name}:<span>{number}</span>\n        <button onClick={() => onBtnClick(id)} disabled={isDeleting}>\n          {isDeleting && <Spinner />}\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport React from 'react';\n\nconst ContactList = ({ contactArray }) => (\n  <ul>\n    {contactArray.map(contact => (\n      <ContactItem\n        id={contact.id}\n        name={contact.name}\n        number={contact.number}\n      />\n    ))}\n  </ul>\n);\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../redux/actions';\nimport { useFetchContactsQuery } from 'redux/reducer';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport 'react-native-get-random-values';\nimport { nanoid } from 'nanoid';\n\nexport const Contacts = () => {\n  const { data } = useFetchContactsQuery();\n  const valueFilter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  let filtId = nanoid();\n\n  const handleFilterChange = event => {\n    dispatch(changeFilter(event.currentTarget.value));\n  };\n\n  const getVisiableContacts = () => {\n    if (data) {\n      const normalizedFilter = valueFilter.toLowerCase();\n      return data.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n  };\n\n  const visiableContacts = getVisiableContacts();\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter id={filtId} value={valueFilter} onChange={handleFilterChange} />\n      {data && (\n        <ContactList contactArray={valueFilter ? visiableContacts : data} />\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","useState","name","setName","number","setNumber","data","useFetchContactsQuery","nameId","nanoid","numbId","useAddContactMutation","createContact","isLoading","handleInputChange","event","currentTarget","value","reset","handleSubmit","preventDefault","some","contact","toLowerCase","includes","Notify","console","log","Error","onSubmit","htmlFor","type","onChange","pattern","title","required","className","disabled","Spinner","id","useDeleteContactMutation","deleteContact","isDeleting","onBtnClick","onClick","contactArray","map","Contacts","valueFilter","useSelector","state","filter","dispatch","useDispatch","filtId","visiableContacts","normalizedFilter","getVisiableContacts","changeFilter","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}